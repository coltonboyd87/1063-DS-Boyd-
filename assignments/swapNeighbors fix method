//Colton Boyd 
//HW - Swap Fix 
//CMPS - 1063 
//Griffin 
//4/9/17 

#include <iostream>
#include <ctime>

using namespace std;
struct node {
	int data;
	node* next;
};

class intLinkedList {
private:
	node* Head;
public:
	intLinkedList() {
		Head = NULL;
	}
	void insert(int x) {
		//empty list case
		if (!Head) {
			Head = new node;
			Head->data = x;
			Head->next = NULL;
		}
		else {//not empty list
			node* T = new node;
			T->data = x;
			T->next = Head;
			Head = T;
		}
	}

	node* Find(int key) {
		node* temp = Head;
		while (temp) {
			if (temp->data == key) {
				return temp;
			}
			temp = temp->next;
		}
		return NULL;
	}

	node* Remove(int key) {
		node* result = Find(key);
		if (result) {
			node* temp = Head;
			while (temp->next != result) {
				temp = temp->next;
			}
			temp->next = result->next;
			delete result;
		}
	}

	void print() {
		node* p = Head;
		while (p) {
			cout << p->data << " ";
			p = p->next;
		}
		cout << endl;
	}

	void divideByX(int x) {
		node* banana = Head;

		while (banana) {
			banana->data /= x;
			banana = banana->next;
		}
	}

	//assumptions are list is >= length(2);
	//function swaps sets of neighbors
	//Ex:
	//Line1: head->4->7->12->9->2->NULL
	//Line2: head->7->4->9->12->2->NULL

	//Fixed Method: swapNeighbors
	void swapNeighbors() {
		node* prev = Head;
		node* temp = Head->next;
		int tempvar;

		while (temp) {
			tempvar = temp->data;
			temp->data = prev->data;
			prev->data = tempvar;
			if (temp->next == NULL)
			{						//Add if/else statement to 
				break;				//successfully swap neighbors.
									//and not terminate early. 
			}
			else
			{
				prev = prev->next->next;
				temp = temp->next->next;
			}
		}
	}

};

int main() {
	srand(8734587);

	intLinkedList mylist;
	for (int i = 0; i<10; i++) {
		mylist.insert(rand() % 100);
	}
	//mylist.print();
	//cout<<mylist.Find(99)<<endl;
	//mylist.Remove(58);
	mylist.print();
	mylist.swapNeighbors();
	mylist.print();


}
